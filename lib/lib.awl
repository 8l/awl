(global {nil} {})

; Simpler function defintiions
(global {func} (fn {f b} {
    global (head f) (fn (tail f) b)}))

; List unpacking and packing
(func {unpack f l} {
    eval (cons f l)})

(func {pack f & xs} {f xs})

(global {curry} unpack)
(global {uncurry} pack)

; Ordered evaluation
(func {do & l} {
    if (== l nil)
        {nil}
        {last l}})

; Scoping
(func {let b} {
    ((fn {_} b) ())})

; Composition
(func {comp f g x} {f (g x)})

; Function manipulation
(func {flip f a b} {f b a})

; List extraction
(func {fst l} {eval (head l)})
(func {snd l} {eval (head (tail l))})
(func {trd l} {eval (head (tail (tail l)))})

; List functions
; (func {len l} {
    ; if (== l nil)
        ; {0}
        ; {+ 1 (len (tail l))}})

(func {nth n l} {
     if (== n 0)
        {fst l}
        {nth (- n 1) (tail l)}})

(func {last l} {nth (- (len l) 1) l})

(func {take n l} {
     if (== n 0)
        {nil}
        {join (head l) (take (- n 1) (tail l))}})

(func {drop n l} {
     if (== n 0)
        {l}
        {drop (- n 1) (tail l)}})

(func {split n l} {list (take n l) (drop n l)})

(func {elem x l} {
     if (== l nil)
        {false}
        {if (== x (fst l)) {true} {elem x (tail l)}}})

; Functional
(func {map f l} {
     if (== l nil)
        {nil}
        {join (list (f (fst l))) (map f (tail l))}})

(func {filter f l} {
     if (== l nil)
        {nil}
        {join (if (f (fst l)) {head l} {nil}) (filter f (tail l))}})

(func {reduce f acc l} {
     if (== l nil)
        {acc}
        {reduce f (f acc (fst l)) (tail l)}})

(func {sum l} {reduce + 0 l})
(func {product l} {reduce * 1 l})

(func {select & cs} {
     if (== cs nil)
        {error "No selection found"}
        {if (fst (fst cs)) {snd (fst cs)} {unpack select (tail cs)}}})

(global {else} true)

(func {case x & cs} {
     if (== cs nil)
        {error "No case found"}
        {if (== x (fst (fst cs))) {snd (fst cs)} {unpack case (join (list x) (tail cs))}}})

(func {range s e} {
     if (>= s e)
        {nil}
        {cons s (range (+ s 1) e)}})
